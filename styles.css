body {
    font-family: Arial, sans-serif;
    text-align: center;
    margin: 0;
    padding: 20px;
    background-color: #f5f5f5;
}

header {
    background-color: #333;
    color: white;
    padding: 15px;
    border-radius: 10px;
    margin-bottom: 30px;
}


.level-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #555;
    color: white;
    border: none;
    border-radius: 8px;
    padding: 10px 15px;
    margin: 0 10px;
    cursor: pointer;
    transition: all 0.3s;
    position: relative;
    min-width: 80px;
}

.level-btn:hover {
    background-color: #777;
}

.level-btn.active {
    background-color: #3a8cf7;
    font-weight: bold;
}

.level-btn.completed {
    background-color: #4CAF50;
}

.level-btn.locked {
    background-color: #999;
    cursor: not-allowed;
}

.trophy {
    width: 24px;
    height: 24px;
    margin-left: 8px;
}

#pad-container {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
}

.circle {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    margin: 0 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    cursor: pointer;
    transition: background-color 0.2s;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.circle.flash {
    background-color: yellow !important;
}

.pattern {
    font-size: 24px;
    margin: 30px 0;
    padding: 15px;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    display: inline-block;
}

.pattern span {
    margin: 0 10px;
    transition: font-size 0.3s, color 0.3s;
}

.pattern span.flash {
    font-size: 48px;
    color: #3a8cf7;
}

#feedback {
    margin-top: 30px;
    font-size: 24px;
    font-weight: bold;
    color: green;
    height: 30px;
}

#bpm-display {
    margin-top: 15px;
    font-size: 18px;
    font-weight: bold;
}

#level-display {
    margin: 15px 0;
    font-size: 20px;
    font-weight: bold;
    color: #333;
}



.achievement-display {
    margin-top: 20px;
    font-size: 22px;
    font-weight: bold;
}

.achievement-gold {
    color: goldenrod;
}

.achievement-silver {
    color: silver;
}

.achievement-bronze {
    color: #cd7f32;
}

.achievement-icon {
    font-size: 40px;
    margin-top: 10px;
}

.trophy-gold {
    color: goldenrod;
}

.trophy-silver {
    color: silver;
}

.trophy-bronze {
    color: #cd7f32;
}

.controls-info {
    margin-top: 20px;
    padding: 10px;
    background-color: #e8f4ff;
    border-radius: 8px;
    font-size: 16px;
    display: inline-block;
}

.key {
    display: inline-block;
    padding: 2px 8px;
    margin: 0 3px;
    background-color: #ddd;
    border: 1px solid #999;
    border-radius: 4px;
    box-shadow: 0 1px 2px rgba(0,0,0,0.2);
    font-family: monospace;
}
/* styles.css */

.level-notification {
  position: fixed;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: rgba(0, 128, 0, 0.9);
  color: white;
  padding: 1rem 1.5rem;
  border-radius: 8px;
  font-size: 1.2rem;
  text-align: center;
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  z-index: 1000;
}
.level-notification.show {
  opacity: 1;
  /* pointer-events still none so it never steals taps */
}
.level-nav-wrapper {
  display: flex;
  align-items: center;
  width: 100%;
  gap: 0.5rem;
}

.level-nav {
  display: flex;
  flex: 1 1 auto;         /* fill the space between arrows */
  overflow: hidden;
}

.level-btn {
  flex: 0 0 20%;          /* always 20% of the nav width = 5 buttons total */
  box-sizing: border-box;
  margin: 0 0.25rem;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.level-nav-arrow {
  flex: 0 0 auto;
  font-size: 2rem;
  color: #fff;
  background: none;
  border: none;
  padding: 0.5rem;
  cursor: pointer;
}
.level-nav-arrow:disabled {
  opacity: 0.3;
  cursor: default;
}
// DOM Elements const circleR = document.getElementById('circleR'); const circleL = document.getElementById('circleL'); const pattern = document.getElementById('pattern'); const feedback = document.getElementById('feedback'); const bpmDisplay = document.getElementById('bpm-display'); const lev

pasted

I need to know what section of my main code to change to add the different volumes and colours based on location of tap to centre of drum icons. Here is a small example: <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Distance-Sensitive Drum</title>
  <style>
    body {
      background: #111;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      touch-action: none;
    }
    #drum {
      width: 256px;
      height: 256px;
      background-image: url('snareimg.jpg');
      background-size: cover;
      background-position: center;
      border-radius: 50%;
      border: 4px solid #fff;
      position: relative;
    }
    #overlay {
      position: absolute;
      width: 100%;
      height: 100%;
      border-radius: 50%;
      background-color: rgba(0, 0, 0, 0);
      pointer-events: none;
      transition: background-color 0.1s ease;
    }
  </style>
</head>
<body>
  <div id="drum">
    <div id="overlay"></div>
  </div>
  <script>
    const drum = document.getElementById("drum");
    const overlay = document.getElementById("overlay");
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    let soundBuffer;
    // Load audio
    fetch('snare1.mp3')
      .then(response => response.arrayBuffer())
      .then(data => audioContext.decodeAudioData(data, buffer => {
        soundBuffer = buffer;
      }));
    drum.addEventListener("touchstart", function (e) {
      const touch = e.touches[0];
      const rect = drum.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      const dx = touch.clientX - centerX;
      const dy = touch.clientY - centerY;
      const distance = Math.sqrt(dx * dx + dy * dy);
      const radius = rect.width / 2;
      const normDist = distance / radius;
      let volume = 0;
      let color = '';
      if (normDist <= 0.25) {
        volume = 1.0;
        color = 'rgba(255, 0, 0, 0.6)'; // Red
      } else if (normDist <= 0.75) {
        volume = 0.66;
        color = 'rgba(255, 165, 0, 0.6)'; // Orange
      } else if (normDist <= 1.0) {
        volume = 0.33;
        color = 'rgba(255, 255, 0, 0.6)'; // Yellow
      } else {
        volume = 0;
        color = 'rgba(0, 0, 0, 0)';
      }
      overlay.style.backgroundColor = color;
      if (soundBuffer && volume > 0) {
        const source = audioContext.createBufferSource();
        source.buffer = soundBuffer;
        const gainNode = audioContext.createGain();
        gainNode.gain.setValueAtTime(volume, audioContext.currentTime);
        source.connect(gainNode).connect(audioContext.destination);
        source.start(0);
      }
    });
    drum.addEventListener("touchend", () => {
      overlay.style.backgroundColor = 'rgba(0, 0, 0, 0)'; // Reset
    });
  </script>
</body>
</html>


.drum-circle {
    position: relative;
    overflow: hidden;
}

.drum-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    pointer-events: none;
    transition: background-color 0.1s ease;
    background-color: rgba(0, 0, 0, 0);
}
